version: '3.8'

services:
  # Caddy Reverse Proxy
  caddy:
    image: caddy:2-alpine
    container_name: cosmoslide-caddy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - caddy-data:/data
      - caddy-config:/config
    networks:
      - web
    depends_on:
      - backend
      - frontend
      - admin

  # Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: cosmoslide-backend
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - NODE_ENV=production
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}
      - REDIS_URL=redis://redis:6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - web
      - backend-net
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # V1 Frontend
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: cosmoslide-frontend
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=https://api.${DOMAIN:-cosmosli.de}
    networks:
      - web
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Admin Panel
  admin:
    build:
      context: .
      dockerfile: packages/admin/Dockerfile
    container_name: cosmoslide-admin
    restart: unless-stopped
    environment:
      - NODE_ENV=production
    networks:
      - web
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # V2 Frontend (미래 대비 - 주석 처리)
  # frontend-v2:
  #   build:
  #     context: .
  #     dockerfile: packages/frontend-v2/Dockerfile
  #   container_name: cosmoslide-frontend-v2
  #   restart: unless-stopped
  #   env_file:
  #     - .env
  #   environment:
  #     - NODE_ENV=production
  #     - NEXT_PUBLIC_API_URL=https://api.${DOMAIN:-cosmosli.de}
  #   networks:
  #     - web
  #   healthcheck:
  #     test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3

  # PostgreSQL
  postgres:
    image: postgres:16-alpine
    container_name: cosmoslide-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - backend-net
    env_file:
      - .env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis
  redis:
    image: redis:7-alpine
    container_name: cosmoslide-redis
    restart: unless-stopped
    volumes:
      - redis-data:/data
    networks:
      - backend-net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backup Scheduler
  # backup-scheduler:
  #   build: ./services/backup-scheduler
  #   container_name: cosmoslide-backup
  #   restart: unless-stopped
  #   environment:
  #     - DB_HOST=postgres
  #     - DB_PORT=5432
  #     - DB_USER=${DB_USER}
  #     - DB_PASSWORD=${DB_PASSWORD}
  #     - DB_NAME=${DB_NAME}
  #     - BACKUP_RETENTION_DAYS=30
  #   volumes:
  #     - ./backups:/backups
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #   networks:
  #     - backend-net

networks:
  web:
    driver: bridge
  backend-net:
    driver: bridge

volumes:
  caddy-data:
  caddy-config:
  postgres-data:
  redis-data:
